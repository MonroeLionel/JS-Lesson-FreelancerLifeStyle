// создание массива 
let arr = new Array(); //используется редко
let array = [];

// значение массива
let arrOne = [
  "vasan",
  "stepan",
  "valera", //висячая запетая
];
//или
let arrTwo = ["vasan", "stapan", "valera",];



//различные типа значений

let arr1 = [
  "vasan",
  {
    type: "JS",
    age: 11,
  },
  true,
  function () {
    console.log("hello");
  }
];

//многомерные массивы
let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

//получение позиций

let arrName = [
  "vasan",      //позиция 0
  "steapn",     //позиция 1
  "valera",     //позиция 2
];
console.log(arrName[0]);
console.log(arrName[2]);


let arr2 = [
  "vasan",
  {
    type: "JS",
    age: 22,
  },
  true,
  function () {
    console.log("Hello");
  },
];

console.log(arr2);          //вызываем весь массив
console.log(arr2[0]);       //вызываем конкретное значение
console.log(arr2[1].type);  //обращаемся к объекту
console.log(arr2[2]);       //вызываем конкретное значение
arr2[3]();                  //вызываем функцию которая находится в массиве 

//многомерные массивы
let matrix2 = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

console.log(matrix2);         //выведет весь массив со значениями 
console.log(matrix2[0][1]);   //выведет первую строку второй столбец

//длина массива свойство Lenght
let arrL = ["vasan", "stepan", "valera",];
console.log(arrL);
console.log(arrL.length);

//доступ к массиву

/*
массив является объектом и ведет себя как 
объект напрмиер копируется по ссылку
*/

let arrObj = ["vasan", "stepan", "valera",];
console.log(arrObj);
let arrNew = arrObj;
arrNew = arrObj;
arrNew.length = 2;
console.log(arrObj);

//изменение значений
let arr3 = ["vasan", "stepan", "valera",];
//меняем существующее значение
arr3[0] = "belka"; //позиция 0 заменится на значение
console.log(arr3);
//добавляем значение
arr3[3] = "OLEG";
console.log(arr3);
//если добавить на большую позцию то остальные значение преобретут
//значение пусто 


//методы массивов

/*
итак с простеньким разобрались теперь перейдем к методам массивов
но перед этим стоит поговорить о вариантах применения для массивов

первы их них это очередь или упорядоченная коллекция элементов
очередь поддерживает два вида операций
1 добавление элемента в конец очереди
2 удаление элемента в начале , сдвигая очередь
так что второй элемент становится первым

другой вариант применения для массивов - структура данных
называемая стек
стек поддеживает два вида операций
1 добавление элеманта в конец
2 удаление последнего элемента

массивы в JS могут работать и как очередь и как стек
мы можем добавлять/удалять элементы как в начало так и в конец массива
и в этом нам помогут следующие команды
*/

// метод push
//добавляет элемент в конец массива

let arrPush = ["vasan", "stepan", "oleg",];
console.log(arrPush);
arrPush.push("valera")  //добавили запись в конец массива
console.log(arrPush);

arrPush.push("еще значение", "котики",);
console.log(arrPush);//в итеге имеем 6 записей в масиве

//метод shift
//удаляем элемент в начале очреди
//второй элемент станет первым происходит сдвиг
let arrShift = ["vasan", "stepan", "oleg",];
console.log(arrShift);
arrShift.shift();
console.log(arrShift);

//метод pop
//удаляет последний элемент массива сдвига нет
//массив становится короче
let arrPop = ["vasan", "stepan", "oleg",];
console.log(arrPop);
arrPop.pop();
console.log(arrPop);

//метод unshift
//добавляет элементы в начало массива
//происходит сдвиг ранее существоваших записей

let arrUnsh = ["vasan", "stepan", "oleg",];
console.log(arrUnsh);
arrUnsh.unshift("kotik");
console.log(arrUnsh);

arrUnsh.unshift("пес", "котопес");
console.log(arrUnsh);

/*
методы push/pop выполняются быстро а методы shift/unshift медленно

давайте рассмотрим на примере добавления элементы
в начало массива(unshift)

просто взять и добавить элемент с номером 0 недостаточно
нужно так же заново пронумеровать остальные элементы

операция unshift должна выполнять 3 действия
1 доабвить элемент с идексом 0
2 сдвинуть все элементы вправо и заного пронумероваить их
заменив 0 на 1 1 на 2 и т.д.
3обновить свойство lenght

чем больше элементов содержит массив тем больше
времени  потребуется для того что бы их переместить
больше операций с памяться

а вот что бы добавть элемент в конец массива (push)
не нужно ничего перемещат
так же не нужно заново нумеровать элементы достаточно
увеличить значение lenght
*/

// Удаление добавление изменение конкретных элементов


let arrDel = [`vasan`, `Ivan`, `petr`,];

delete arrDel[1];       //метод удаляет элемент но длина останется прежней
console.log(arrDel);
console.log(arrDel[1]);     //вернет undefined т.к там пустота
console.log(arr.length);

//метод splice позволяет добавлять удалять изаменять элементы
//синтакис qrr.splice(index[,deletCount,eLem1,...,eLemN])

//удаляем элемент
let arrS1 = [`vasan`, `stepan`, `inokendii`,];
//начиная с первой позиции (степан) удаляем один элемент
arrS1.splice(1, 1);
console.log(arrS1); //удаляем и позицию остальые элементы преобратают новые значения позиции

//удаляем элемент и возвращаем его в переменную
let arrS2 = [`vasan`, `stepan`, `inokendii`,];
let removed = arrS2.splice(1, 1); //удаляем и помещаем элемент в переменную
console.log(removed);

//заменяем переменные 
let arrS3 = [`vasan`, `stepan`, `inokendii`,];
arrS3.splice(0, 1, `kolan`);
//начиая с нулевой позиции заменяем элемент
console.log(arrS3);

//добавляем элемент
let arrS4 = [`vasan`, `stepan`, `inokendii`,];
//начиная с первой позиции (перед степаном) добавляем два элемента
arrS4.splice(1, 0, `kolan`, `fedor`);
//указываем(1-это откуда начинаем добвление 0-это нужно удалять элементы или нет)
console.log(arrS4);

//удаляем элемент
let arrS5 = [`vasan`, `stepan`, `inokendii`,];
//начиная с последней позиции(инокендий) удаляем элемент
arrS5.splice(-1, 1);
console.log(arrS5);
