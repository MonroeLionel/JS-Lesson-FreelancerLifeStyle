//термин: "унарный", "бинарный", "операнд"

/*
операнд - это то к чему применяется оператор
их еще называют аргументами 
*/

//пример
let userAge = 30 - 6; //числа 30 и 6 это опеанды
//либо
let h = 1;
let y = 2;
let userHeight = h - y; //переменные h и y операнды

/* 
бинарными назыавют операторы
которые применяются к двум операндам
в нашем примере вычитание - , это бинарный оператор
*/
let uSerAge = 30 - 6;
/*
унарным считается оператор который 
применен только к одному операнду например
*/

let userCash = -900;

//математические опеаторы
let x

x = 5 + 8;
console.log(`результат сложения ${x}`);

x = 9 - 5;
console.log(`результат вычитания ${x}`);

x = 8 * 7;
console.log(`результат умножения ${x}`);

x = 66 / 11;
console.log(`результат деления ${x}`);

x = 11 % 3;
console.log(`результат взятия остатка от деления ${x}`);

x = 5 ** 3;
console.log(`возведения в степень ${x}`);


//специальные возможности операторов

//применения оператора сложения к строкам
let vasan = "васян" + "лол" + "проу";
console.log(vasan);

/*
всли в выражении есть строка то есть если хояб бы
один операнд будет строкой то конечный результат 
тоже будет стррокой
*/
let vasanTwo = "васян" + 58;
console.log(vasanTwo);
console.log(typeof vasanTwo);

//операторы до сложения со строкой выполняются как обычно
let vsan3 = 99 - 66 + "васян";
console.log(vsan3);

//другие операторы
let test1 = "25" - 5;
console.log(test1);
console.log(typeof test1);

let test2 = 10 * "60";
console.log(test2);
console.log(typeof test2);

let test3 = 3 * "vasan";
console.log(test3); //вернет NaN
console.log(typeof test3);

//унарный оператор сложения + 
//со строками
let result1 = +"88";
console.log(result1);
console.log(typeof result1);

//с числами
let result2 = +10;
console.log(result2);
console.log(typeof result2);

let nameV = "90";
let nameB = "33";
console.log(nameV + nameB);

console.log(+nameV + +nameB);

//более длинная запись
console.log(Number(nameV) + Number(nameB));


//сокращенная запись вычислений с присвоением

let banan = 5;
banan = banan + 3;
console.log(`длянная запись ${banan}`);
banan = banan * 9;
console.log(`длянная запись ${banan}`);
let apelsin = 5
apelsin += 3;
console.log(`короткая ${apelsin}`);

apelsin *= 9;
console.log(`короткая ${apelsin}`);

//инкремент и декремент

//инкремент ++
let addUser = 2
addUser++;
console.log(addUser);

//декремент --
let remuveUser = 3;
remuveUser--;
console.log(remuveUser);

//инкремент и декремент можно применитьб только к перемнной

/*
операторы ++ и -- могут быть расположены
не только после но и до переменной
*/

//постфиксная форма
banan++;
banan--;
//префиксная форма
--banan;
++banan;

//постфиксная форма
let userCount = 0;
let newUser = userCount++;
console.log(newUser);
console.log(userCount);
//префиксная форма
let userCount2 = 0;
let newUser2 = ++userCount2;
console.log(userCount2);

let userCount3 = 0
let newUser3 = 2 * ++userCount3;
console.log(newUser3);

//оператор запятая

/*
продостовляет нам возможность вычислять несколько выражений
разделяя их запятой Каждое выражение выполняется
но возвращается результат только последнего
*/

let fuva = (8 + 50, 99 * 5);
console.log(fuva);

//побитовые операторы
/* сложно для криптографии
AND(и) (&)
OR(или) (|)
XOR(побитовое исключающее или) (^)
LEFT SHIFT(левый сдвиг) (<<)
RIGHT SHIFT(правый сдвиг) (>>)
ZERO-FILL RIGHT SHIFT(павый сдвиг с заполнение нулями) (>>>)
*/

//операторы сравнения
/*
a > b     больше
a < b     маньше
a >= b    больше или равно
a <= b    меньше или равно
a == b    равно
a != b    не равно
a === b   строгое равно
a !== b   строгое не равно
*/
//операторы сравнения возвращают логический тип данных
//либо true false
console.log(5 < 9);
console.log(58 == 99);
console.log(99 > 10);

//сравнение строк
//алфавитный порядок
console.log('Б' > 'А');

//алфавитный поядок
console.log('Скрипт' > 'Скрипка');

//кол-во символов
console.log('Слайдер' > 'Слайд');

//регистр учитывает UNICODE
console.log('Васян' > 'васян');

/*
Алгоритм сравненис двух строк
1 сначала сравниваются первые символы строк
2 если первый символ первой строки больше(меньше)
чем первый символ второй , то первая строка 
больше(меньше) второй сравнение завершено
3 если первые символны равны , то таким же образом 
сравниваются уже вторые символы строк
4 сравнение продолжается пока не закончится одна из строк
5 если обе строки заканчиваются одновременно то они равны 
иначе большей считается более длянная строка
*/

//сравнение разных типов

//преобразование в число
console.log('90' > 10);
console.log('009' == 9);

//логические
console.log(true == 1);
console.log(0 == false);

/*
оператор строгого равенства или не равенства
проверяет равенства без приведения типов
*/

console.log(0 === false);
console.log('009' === 9);
console.log('58' !== 58);

//сравнения с null и undefiner

//строгое равенство
console.log(null === undefined); //false
//не строгоае
console.log(null == undefined); //true

//сравнение с null
console.log(null > 0);  //false
console.log(null == 0); //false
console.log(null >= 0); //true
//сравнение undifine
console.log(undefined > 0); //false
console.log(undefined == 0);  //false
console.log(undefined >= 0);    //false

/*
что бы избежать проблем при сравнении нужно очень осторожно
относитчя к любому сранению c undefine / null
кроме случаев строгого равенства ===
не сипользовать сравнения >= > < <= с переменными которые могут 
принимать значения null / undefine
разве что ты точно знаешь что делаешь
в любом случаее если переменная может принимать
эти занчения то стоит добавить для них отдельные проверки
*/

//логические операторы
// оператор || (или)
/*
оператор ИЛИ записывается как две вертикальные черты
процесс его работы следующий
1 вычисляет операнды слева направо
2 каждый операнд конвертирает в логическое значение
если результат true останавливается и возвращает
исходное значение этого операнда
3 если все операнды являются ложными(false) возвращает
занчение последнего из них

 */

//булевые значения
console.log(true || true);    //true
console.log(false || true);   //true
console.log(true || false);   //true
console.log(false || false);  //false

//разные типы
console.log(1 || 0);
console.log(true || 'vasan');
console.log(null || 44);
console.log(null || 'vasan' || 0);
//true нет совсем вернет последнен значение 
console.log(undefined || null || '' || 0);

//присвоение значений в переменную

let vasanLol = '';
let lolProu = 'vasan';
let vasanLolProu = vasanLol || lolProu || "не пошлло";
//присвает переменой первое значение которое вернет true
console.log(vasanLolProu);

//сокращенное вычисление услови
let papaya = 10;
let kivi = 5
papaya > kivi || kivi++; //выолпнит вторую част и увеличит киви если первый будет false
console.log(kivi);

//оператор && (И)
/*
1 вычисляет операнды слева на право
2каждый операнд преобразует в логическое значение
если результат false останвливается и возвращает 
исходное значение этого операнда
3 если все операнды были инстиными возвращает значение последнего
*/

//булевые значения
console.log(true && true);    //true
console.log(false && true);   //false
console.log(true && false);   //false
console.log(false && false);  //false

//разные типы
console.log('vasan' && 0 && 2 && 3); //вернет 0 т.к. он false
console.log(1 && 2 && null && 3); //вернет null т.к. он false
console.log('15' && '43'); //вернет 43 т.к. он последний true все

//приоритет && больше чем у ||
console.log(1 && 0 || 2 && 1);
//сначала получает 1 т.к. он встречается первый 1 && 0
// потом получаем 2 т.к. он встречается первым 2 && 1
//потом получаем 1 т.к. он встречается первым 1 || 2

let persik = 1;
(persik > 0) && console.log(`васян ${persik}`);


//оператор ! (НЕ)
/*
1 сначала приводт аргумент к логическому типу
2 затем возвращает противоположное значение
*/
//булевое значение
console.log(!true);
//раные типы
console.log(!null);   //true
console.log(!1);      //false
console.log(!'');     //true
console.log(!'vasan') //false

//приоретет НЕ ! является аивысшим из всех логических операторов
//поэтому он всегда выполняется первы перед && или ||
console.log(!true && 58 || 18 && !1);
// !true && 58 вернет false
//18 && !1 вернет false
//false || false вернет false

//используется для преобразования тпа в boolean
console.log(!!'васян');
console.log(Boolean('васян'));

//оператор объединения с null (??)
/*
оператор ?? возвращает первый аргумент
если он не null / undefine иначе второй
*/
let testBanan //если не объявлять то вернет второе значение
console.log(testBanan ?? 'ввасян лол проу');

console.log(!false && 11 || 18 && !'');